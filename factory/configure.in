dnl $Id: configure.in,v 1.1 1997-06-02 15:56:04 schmidt Exp $
dnl
dnl configure.in - process this file with autoconf to produce a configure script.
dnl

#
# - initialisation.
#

AC_REVISION($Id: configure.in,v 1.1 1997-06-02 15:56:04 schmidt Exp $)
AC_INIT(canonicalform.cc)
AC_CONFIG_HEADER(config.h)
AC_CONFIG_AUX_DIR(bin)

#
# - do not change version here!
#
dnl
dnl - change version here.
dnl
factory_version="1.2c"

#
# - check withs and enables.
#

AC_ARG_WITH(
  Singular,
  [  --with-Singular         build for use with computer algebra system Singular.
                          Note: all other --with/--enable-options (except
                          --enable-assertions) are ignored if --with-Singular
                          is specified.],
  ,
  with_Singular=no)

AC_ARG_WITH(
  memman,
  [  --with-memman<=memman>  specify factory memory manager.
                          <memman> is either 'old' (default), 'new' or
                          'no' which means not to use the memory manager
                          at all.],
  [ if test "x$with_Singular" = xyes && test "x$with_memman" != xno; then
      AC_MSG_WARN(option --with-memman ignored with Singular);
      with_memman=no
    fi ],
  [ if test "x$with_Singular" = xyes; then
      with_memman=no
    else
      with_memman=old
    fi ])

AC_ARG_ENABLE(
  streamio,
  [  --disable-streamio      build factory whithout streamio],
  [ if test "x$with_Singular" = xyes && test "x$enable_streamio" != xno; then
      AC_MSG_WARN(option --enable-streamio ignored with Singular)
      enable_streamio=no
    fi ],
  [ if test "x$with_Singular" = xyes; then
      enable_streamio=no
    else
      enable_streamio=yes
    fi ])

AC_ARG_ENABLE(
  memdebug,
  [  --enable-memdebug=<level> switch on memory managment debugging.  Meaningful
                          with --with-memman=new only.  <level> may be either
                          'no' (default), 'normal', or 'full'.],
  [ if test "x$with_memman" = xnew; then
      if test "x$enable_memdebug" = xyes; then
	enable_memdebug=normal
      fi
    else
      if test "x$enable_memdebug" != xno; then
	AC_MSG_WARN(option --enable-memdebug ignored)
	enable_memdebug=no
      fi
    fi ],
  enable_memdebug=no)

AC_ARG_ENABLE(
  assertions,
  [  --disable-assertions    build factory without assertions activated],
  ,
  [ if test "x$with_Singular" = xyes; then
      enable_assertions=no
    else
      enable_assertions=yes
    fi ])

AC_ARG_ENABLE(
  timing,
  [  --enable-timing         build factory so it will print timing information],
  [ if test "x$with_Singular" = xyes && test "x$enable_timing" != xno; then
      AC_MSG_WARN(option --enable-timing ignored with Singular);
      enable_timing=no
    fi ],
  enable_timing=no)

AC_ARG_ENABLE(
  debugoutput,
  [  --enable-debugoutput    build factory so it will print debugging information],
  [ if test "x$with_Singular" = xyes && test "x$enable_debugoutput" != xno; then
      AC_MSG_WARN(option --enable-debugoutput ignored with Singular);
      enable_debugoutput=no
    fi ],
  enable_debugoutput=no)

#
# - check for CC but be careful about CFLAGS.
#

test "${CFLAGS+set}" = set || cflags_expl_set=no
AC_PROG_CC
if test "x$GCC" != xyes; then
  AC_MSG_WARN(you better use gcc to compile factory)
fi

#
# - check for CXX but be careful about CXXFLAGS.
#

test "${CXXFLAGS+set}" = set || cxxflags_expl_set=no
AC_PROG_CXX
if test "x$GXX" != xyes; then
  AC_MSG_WARN(you better use gcc to compile factory)
fi

#
# - check for some other programs.
#

AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB
AC_PROG_MAKE_SET
AC_CHECK_PROG(AR, ar, ar, where-is-your-ar)
AC_CHECK_PROG(BISON, bison, bison, where-is-your-bison)

# get absolute path of srcdir to avoid some funny problems when
# feeding our results to other peoples configure via cache
if echo "$srcdir" | grep '^/' > /dev/null 2> /dev/null; then
  abssrcdir="$srcdir"
else
  abssrcdir="`pwd`/$srcdir"
fi
AC_PATH_PROG(MKINSTALLDIRS, mkinstalldirs, -mkdir, $PATH:$abssrcdir/bin)
AC_PATH_PROG(MAKEHEADER, makeheader, , $abssrcdir/bin:$PATH)

#
# - check for libraries.
#

AC_CHECK_LIB(gmp, mpz_init)
AC_CHECK_LIB(m, sqrt)

#
# - check for header files.
#

AC_LANG_CPLUSPLUS

AC_CHECK_HEADERS(gmp.h)

AC_CHECK_HEADERS(stdio.h stdlib.h string.h time.h math.h, ,
  [ AC_MSG_ERROR(standard C header files not found) ])

dnl if test "x$enable_streamio" != xno; then
  AC_CHECK_HEADERS(iostream.h strstream.h, , [ AC_MSG_ERROR(C++ header files not found) ])
  AC_CHECK_HEADERS(ctype.h, , [ AC_MSG_ERROR(standard C header files not found) ])
dnl fi

if test "x$enable_timing" != xno; then
  AC_CHECK_HEADERS(sys/param.h sys/times.h, ,
    [ AC_MSG_ERROR(sys/times.h or sys/param.h not found.  Try
                  configure --disable-timing) ])
fi

#
# - check for compiler characteristics.
#

AC_C_CROSS

AC_C_CONST
AC_C_INLINE
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(void *, 4)

# arithmetic shift
AC_MSG_CHECKING(whether your compiler does arithmetic shifts)
AC_CACHE_VAL(ac_cv_shift,
  [ AC_TRY_RUN(
      [ int main() { if (-2 >> 1 == -1) exit(0); else exit(1); } ],
      ac_cv_shift=yes, ac_cv_shift=no, ac_cv_shift=no) ])
if test "x$ac_cv_shift" = xyes; then   
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

#
# - paths.
#

# we have to get datadir explicitely for config.h
save_prefix="$prefix"
test "x$prefix" = xNONE && prefix="$ac_default_prefix"
expl_datadir=`eval echo "$datadir"`
prefix="$save_prefix"

if test "x$with_Singular" = xyes; then
  gftabledir='${datadir}/Singular/gftables'
  expl_gftabledir="$expl_datadir/Singular/gftables"
  tagtemplatedir='${includedir}/templates'
  templatedir="\${includedir}/templates"
else
  gftabledir='${datadir}/factory/gftables'
  expl_gftabledir="$expl_datadir/factory/gftables"
  tagtemplatedir="\${includedir}/templates-$factory_version"
  templatedir="\${includedir}/templates"
fi

#
# - the name of the game and the targets to create.
#

if test "x$with_Singular" = xyes; then
  taglibfactory=libsingcf.a
  taglibmem=
  tagheaderfactory=factory.h
  tagfactoryconf=factoryconf.h

  libfactory=libsingcf.a
  libmem=libcfmem.a
  headerfactory=factory.h
  factoryconf=factoryconf.h

  factorysrc='$(basefactorysrc) $(singfactorysrc)'
  factoryincl='$(basefactoryincl) $(singfactoryincl)'
  memmansrc=
  memmanincl=

  alltargets=cf
  installtargets=installcf
  uninstalltargets=uninstallcf
else
  taglibfactory="libcf-$factory_version.a"
  taglibmem="libcfmem-$factory_version.a"
  tagheaderfactory="factory-$factory_version.h"
  tagfactoryconf="factoryconf-$factory_version.h"

  libfactory=libcf.a
  libmem=libcfmem.a
  headerfactory=factory.h
  factoryconf=factoryconf.h

  factorysrc='$(basefactorysrc)'
  factoryincl='$(basefactoryincl)'
  memmansrc='$(basememmansrc)'
  memmanincl=

  alltargets=cf
  installtargets=installcflinks
  uninstalltargets=uninstallcflinks
fi

#
# - now set defines and variables according to our tests.
#

# CFLAGS
if test "x$GCC" = xyes && test "x$cflags_expl_set" = xno; then
  AC_MSG_WARN([we will use '-O2 -fomit-frame-pointer' as default for CFLAGS
                    (instead of the configure default '-g -O')])
  CFLAGS="-O2 -fomit-frame-pointer"
fi

# CXXFLAGS
if test "x$GXX" = xyes && test "x$cxxflags_expl_set" = xno; then
  AC_MSG_WARN([we will use '-O2 -fomit-frame-pointer' as default for CXXFLAGS
                    (instead of the configure default '-g -O')])
  CXXFLAGS="-O2 -fomit-frame-pointer"
fi

# ARFLAGS
test "${ARFLAGS+set}" = set || ARFLAGS=cr

# Singular
if test "x$with_Singular" = xyes; then
  AC_DEFINE(SINGULAR)
fi

#! gmp.h
if test "x$ac_cv_header_gmp_h" != xyes; then
  AC_MSG_WARN([gmp.h not found.  We will assume that you are configuring
                    the gmp-package at the moment , so at compile time there will])
  CPPFLAGS="-I\$(includedir) $CPPFLAGS"
fi

# cross-compiling ?!
if test "x$cross_compiling" = xyes; then
  AC_MSG_WARN([you better specify a cache file to get the values for
                    cross-compiling right (call configure --cache-file=target.cache)])
fi

# sizeofs
if test "x$ac_cv_sizeof_int" != x4 || \
   test "x$ac_cv_sizeof_void_p" != x4; then
  AC_MSG_ERROR(we need sizeof(int) == sizeof(void p) == 4)
fi

# arithmetic shift
if test "x$ac_cv_shift" = xyes; then   
  AC_DEFINE(HAS_ARITHMETIC_SHIFT)
fi

# memory manager
if test "x$with_memman" != xno; then
  alltargets="$alltargets mem"
  installtargets="$installtargets installmem"
  uninstalltargets="$uninstalltargets uninstallmem"
  AC_DEFINE(USE_MEMUTIL)

  if test "x$with_memman" != xnew; then
    memmansrc="$memmansrc \$(oldmemmansrc)"
    memmanincl='$(oldmemmanincl)'
    AC_DEFINE(USE_OLD_MEMMAN)
  else
    memmansrc="$memmansrc \$(newmemmansrc)"
    memmanincl='$(newmemmanincl)'

    if test "x$enable_memdebug" = xfull; then
      AC_DEFINE(MDEBUG, 1)
    elif test "x$enable_memdebug" != xno; then
      AC_DEFINE(MDEBUG, 0)
    fi
  fi
fi

# iostream
if test "x$enable_streamio" = xno; then
  AC_DEFINE(NOSTREAMIO)
else
  factorysrc="$factorysrc \$(useiofactorysrc)"
  factoryincl="$factoryincl \$(useiofactoryincl)"
fi

# assertions
if test "x$enable_assertions" = xno; then
  AC_DEFINE(NOASSERT)
fi

#
# - debugoutput and timing stuff.
#

timingtargets=/dev/null
debouttargets=/dev/null
debtimingtargets=/dev/null
enhanceddebtime=no

# timing
if test "x$enable_timing" != xno; then
  if test "x$enable_timing" = xyes; then
    AC_DEFINE(TIMING)
  else
    echo "$enable_timing" | tr ',' '\n' | sed 's/\..*$//' | sort > conftest.time
    timingtargets=conftest.time
    enhanceddebtime=yes
  fi
fi

# debugoutput
if test "x$enable_debugoutput" != xno; then
  if test "x$enable_debugoutput" = xyes; then
    AC_DEFINE(DEBUGOUTPUT)
  else
    echo "$enable_debugoutput" | tr ',' '\n' | sed 's/\..*$//' | sort > conftest.debout
    debouttargets=conftest.debout
    enhanceddebtime=yes
  fi
fi

# create makefile fragments
if test "x$enhanceddebtime" = xyes; then
  # get the intersection of timingtargets and debouttargets
  sort "$timingtargets" "$debouttargets" | uniq -d > conftest.debtime
  if test -s conftest.debtime; then
    debtimingtargets=conftest.debtime
  fi
  if test "x$timingtargets" != x/dev/null; then
    sort "$timingtargets" "$debtimingtargets" | uniq -u |
      while read line; do
      	echo "$line.o: $line.cc config.h;" '$(CXX) -c $< -DTIMING $(LIBCXXFLAGS) -o $@'
      done > conftest.tmp
    mv conftest.tmp "$timingtargets"
  fi
  if test "x$debouttargets" != x/dev/null; then
    sort "$debouttargets" "$debtimingtargets" | uniq -u |
      while read line; do
      	echo "$line.o: $line.cc config.h;" '$(CXX) -c $< -DDEBUGOUTPUT $(LIBCXXFLAGS) -o $@'
      done > conftest.tmp
    mv conftest.tmp "$debouttargets"
  fi
  if test "x$debtimingtargets" != x/dev/null; then
    while read line; do
      echo "$line.o: $line.cc config.h;" '$(CXX) -c $< -DTIMING -DDEBUGOUTPUT $(LIBCXXFLAGS) -o $@'
    done < "$debtimingtargets" > conftest.tmp
    mv conftest.tmp "$debtimingtargets"
  fi
fi

#
# - complete and substitute variables, defines.
#

AC_SUBST(gftabledir)
AC_SUBST(tagtemplatedir)
AC_SUBST(templatedir)

AC_SUBST(factory_version)

AC_SUBST(taglibfactory)
AC_SUBST(taglibmem)
AC_SUBST(tagheaderfactory)
AC_SUBST(tagfactoryconf)

AC_SUBST(libfactory)
AC_SUBST(libmem)
AC_SUBST(headerfactory)
AC_SUBST(factoryconf)

AC_SUBST(ARFLAGS)
AC_SUBST(MAKEHEADERFLAGS)

AC_SUBST(factorysrc)
AC_SUBST(factoryincl)
AC_SUBST(memmansrc)
AC_SUBST(memmanincl)

AC_SUBST(alltargets)
AC_SUBST(installtargets)
AC_SUBST(uninstalltargets)

AC_SUBST_FILE(timingtargets)
AC_SUBST_FILE(debouttargets)
AC_SUBST_FILE(debtimingtargets)

AC_DEFINE_UNQUOTED(FACTORYVERSION, "$factory_version")
AC_DEFINE_UNQUOTED(GFTABLEDIR, "$expl_gftabledir")

AC_OUTPUT(GNUmakefile)
