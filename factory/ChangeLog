Fri Jun  6 09:38:05 1997  Jens Schmidt  <schmidt@mathematik.uni-kl.de>

	* configure.in: removed some stupid warnings when 'dangerous'
	  combinations of with's/enable's are specified and some other
 	  fixes in configures messages

	* configure.in (AC_ARG_ENABLE(memdebug)): removed code which sets
	  enable_memdebug to 'normal' since this is really never tested

	* configure.in (AC_ARG_WITH(gmp, builtingmp)): new command line
	  options.  rest of configure.in adapted to the new scheme of
 	  specifying where gmp lives

	* configure.in: doc fix

	* GNUmakefile.in (distsrc, clean): gengftables added to the
	  distribution
	  (distfiles): ChangeLog added to the distribution

Thu Jun  5 15:03:48 1997  Jens Schmidt  <schmidt@mathematik.uni-kl.de>

	* configure.in: --with-Singular --enable-debugoutput is now
	  possible.  So is --with-Singular --enable-timing.

	* GNUmakefile.in (gengftables.o): added check which makes make
	  complain if factory was not configured in the right way

	* configure.in: removed checks on sizeof(int) == sizeof(void *)
	  == 4

	* debug.h: removed dependency on NDEBUG

	* factoryconf.template: doc fix

	* GNUmakefile.in: ($(srcdir)/config.h.in, $(srcdir)/stamp-h.in,
 	  realmaintainerclean, dist, distfiles): instead of creating
 	  config.h.in we will deliver it as a real source file
	* config.h.in: config.h.in is a real source file and not
	  longer created from acconfig.h

	* config.h.in (INCL_CONFIG_H): added flag to prevent multiple
	  inclusion of config.h

	* GNUmakefile.in ($(srcdir)/configure): make will not complain
	  about a missing autoconf any longer

	* canonicalform.cc (operator >>, SINGULAR): returns 0 again when
	  compiled with Singular and with stream IO enabled

Before Mon Jun  4 1997 Jens Schmidt <schmidt@mathematik.uni-kl.de>

	This is a list of most of the changes made after I took the
	responsibility for factory development and before I started to
	update the ChangeLog regularily.  It is unlikely to be complete.

	Besides minor changes at 'source code level' (bug fixes, new
 	functionality) which are not really visible to the user in general
 	there are quite a lot of changes at 'organization level' (aka
 	preprocessor functionality) and at 'distribution level'
 	(configure, Makefile).


	First, the changes at distribution level:

	* bin: some useful/necessary scripts added to the distribution
	* install-sh: moved to bin

	* ChangeLog: added to the distribution

	* configure.in: totally rewritten

	* conf.h.in, config.h.in: conf.h.in replaced by a totally
	  rewritten config.h.in.  Furthermore, config.h is now explecitely
 	  included in allmost every file of the distribution.
	* factoryconf.template: the contents of config.h and assert.h is
	  now pasted into factoryconf.h created from factoryconf.template.
  	  factoyconf.h is included instead of config.h in all source files
 	  which are not translated but installed (e.g. templates) and is
	  installed, too.

	* factory.template, factory.h: factory.h removed from the
	  distribution, factory.template added since makeheader is now
 	  included in the distribution
	* singfactory.h: removed from distribution.  Functionality
	  moved to factory.template/factory.h.

	* gengftables.cc: code for generating gftables added to the
	  distribution

	* INSTALL: removed from distribution since not up to date

	* memman.h, mmalloc.c, mmallocs.c, mmheap.c, mmprivate.h,
	  mmutil.c, mmallocb.c, mmblock.c, mminit.c, mmspec.c: new memory
	  manager added to the distribution

	* Makefile.in, GNUmakefile.in: Makefile.in replaced by a totally
	  rewritten GNUmakefile.in

	* mpext.cc, mpext.h, mpfactory.h: removed from distribution.  No
	  more MULTIPROTOCOL support.

	* readcf.cc: added to distribution since not all users have
	  bison available


	Now for the changes at organization level:

	* canonicalform.cc (operator >>, SINGULAR): removed dependency on
	  #define SINGULAR

	* cf_factor.cc (factorize, MULTIFACTOR): removed dependency on
	  #define MULTIFACTOR

	* cf_defs.h (incl_cf_defs_H, INCL_CF_DEFS_H): #define renamed so
	  cf_defs.h is included only once

	* cf_gcd.cc (DEBOUT): debug output changed to calls of DEBOUT
	  macros
	* cf_linsys.cc (DEBOUT): debug output rewritten and changed to
	  calls of DEBOUT macros
	* fac_berlekamp.cc (QPrintFF, QPrintGF, DEBOUT): debug output
	  changed to calls of DEBOUT macros
	* fac_univar.cc (DEBOUT, DEBOUTLN, DEBINCLEVEL, DEBDECLEVEL):
	  debug output rewritten
	  (hprint, DEBOUTHPRINT, NDEBUG): calls to function hprint()
	  wrapped by macro DEBOUTHPRINT, which definitions depends on
	  DEBUGOUTPUT (instead of NDEBUG, as before).  All callers
	  changed.
	* timing.h (iostream.h stdio.h): stream IO changed to std IO

	* cf_linsys.cc (TIMING): #define TIMING removed
	* fac_distrib.cc (DEBUGOUTPUT): #undef DEBUGOUTPUT removed
	* fac_ezgcd.cc (DEBUGOUTPUT, TIMING, timing.h): some spurious
	  #define's and #include's removed
	* fac_multihensel.cc (DEBUGOUTPUT, TIMING): some spurious
	  #define's removed
	* fac_multivar.cc (DEBUGOUTPUT, TIMING): some spurious
	  #define's removed
	* fac_univar.cc (DEBUGOUTPUT, TIMING, sys/times.h): some spurious
	  #define's and #include's removed

	* config.h.in (MDEBUG, NOASSERT, TIMING, DEBUGOUTPUT): new
	  #defines

	* config.h.in (MULTIPROTOCOL): #define removed.  No more
	  MULTIPROTOCOL support.
	* int_int.h (class InternalInteger, MULTIPROTOCOL): removed
	  declarations dependent on #define MULTIPROTOCOL
	* int_rat.h (class InternalRational, MULTIPROTOCOL): removed
	  declarations dependent on #define MULTIPROTOCOL

	* config.h.in (NOSTREAMIO): new define NOSTREAMIO to switch off
	  stream IO.  Operators <<, >>, and related stuff wrapped by
 	  #ifndef where necessary

	* cf_factory.cc (CFFactory::basic ( int, int ), ASSERT1): error
	  message changed to call of ASSERT1 macro
	* fac_util.cc: (crossprod, ASSERT): error message changed to
	  call of ASSERT macro
	* int_cf.cc: (ASSERT, ASSERT1): error messages changed to calls of
	  ASSERT1 macro
	* int_cf.h (InternalCF::InternalCF( InternalCF& ), ASSERT): error
	  message changed to call of ASSERT macro
	* int_poly.cc (InternalPoly::InternalPoly( InternalPoly& ),
	  ASSERT): error message changed to call of ASSERT macro

	* fac_univar.cc (TIMING, TIMING_END_AND_PRINT, timing.h): timing
	  stuff changed to calls of TIMING macros

	* initgmp.cc (initializeGMP, SINGULAR): dependency on
	  #define SINGULAR removed

	* int_cf.h (PVIRT_VOID, PVIRT_INTCF, PVIRT_BOOL, PVIRT_INT,
	  PVIRT_CHARCC): PVIRT_-*functionality moved to assert.h

	* mmallocb.c (TEST, MM_TEST): references to #define TEST changed
	  to MM_TEST

	* timing.h (TIMING_END_AND_PRINT): new macro

	* timing.h (HZ, CLOCKS_PER_SEC, time.h): ticks per second
	  calculated in a hopefully more portable way

	* timing.h: doc fix


	Last not least, changes at source code level:

	* canonicalform.cc (mapinto): fixed mapping from int to GF

	* cf_defs.h (SW_USE_SPARSEMOD): new switch

	* cf_factor.cc, cf_factor.h (sqrFree( CanonicalForm, boolean )):
	  new function which sorts output if desired
	* cf_factor.cc (sqrFree): simply calls the new function now

	* cf_globals.cc (factoryVersion, FACTORYVERSION): version string
	  added
	* cf_globals.h (factoryVersion): version string added
	* config.h.in (FACTORYVERSION): new #define to initialize
	  factoryVersion

	* cf_linsys.cc (linearSystemSolve, determinant, determinant2):
	  typedef int_ptr introduced and used

	* cf_random.cc (RandomGenerator, RanGen): new class
	  RandomGenerator and new static RanGen which replace calls to the
 	  poorly programmed stdlib-random generator

	* cf_iter.h (iostream.h): spurious #include <iostream.h> removed
	* cf_factor.h (iostream.h): spurious #include <iostream.h> removed
	* cf_reval.h (iostream.h): spurious #include <iostream.h> removed
	* cf_switches.h (RATTIONAL): spurious #define RATIONAL removed
	* int_int.cc (IntInt): spurious #define IntInt removed
	* int_pp.cc (IntPP): spurious #define IntPP removed
	* memutil.c (stdio.h): spurious #include <stdio.h> removed
	* mmalloc.c (stdio.h): spurious #include <stdio.h> removed

	* fac_univar.cc (MAX_FP_FAC, max_fp_fac): #define changed to const int

  	* fac_univar.cc (initHG, ZFactorizeUnivariate): added
	  STICKYWARNings because of some strange errors which occure in
 	  these functions

	* fac_univar.cc (kBound): added cast to double in calculation of
	  the bound
	  (UnivariateQuadraticLift): added cast to double in calculation
	  of no_iter

	* fac_univar.cc (ZFactorizeUnivariate): removed spurious
	  declaration of CFFList G.  Some trivial structural changes.
  	  Removed test on D != 0 before deleting D.

	* fac_univar.cc: doc fix

	* int_int.cc (InternalInteger::genOne): Ruedigers last fryday
	  afternoon fix

	* variable.cc (Variable::Variable( char ), Variable::Variable( int, char ),
	  rootOf): delete changed to delete [] where necessary

	* variable.cc (Variable::name): casts to int added


	Not sorted yet:

	* assert.h (NOASSERT, NDEBUG): the define to switch the assertions
	  off is NOASSERT instead of NDEBUG.  But NDEBUG works, too, for
	  backward compatibility.
	  (__ASSERT1, ASSERT1, STICKYASSERT1): new assert macros which
	  print additional argument
	  (DEBINCLEVEL, DEBDECLEVEL, DEBOUTSL, DEBOUT, DEBOUTLN): debug
	  functionality moved to debug.h
	  (PVIRT_VOID, PVIRT_INTCF, PVIRT_BOOL, PVIRT_INT, PVIRT_CHARCC):
	  PVIRT_*-functionality moved from int_cf.h to assert.h
	  (__WARN, WARN, STICKYWARN): new macros
	  (__ASSERT, __STICKYASSERT): the preprocessor instead of
 	  fpritnf() pastes the message into the format string now
	* assert.cc: renamed to debug.cc
	* debug.h, debug.cc: new files.  DEBOUT-functionality moved from
	  assert.h/assert.cc to these files.  All sourcre files which need
	  this functionality include debug.h.
	  (DEBUGOUTPUT, NDEBUG): DEBUGOUTPUT is switched off now if NDEBUG
	  is switched on
	  (DEBOUT, DEBOUTLN): slightly modified so they print 'objects'
	  now instead of only one 'msg' and one 'object'.  All callers
	  changed.
	  (deb_level, level_msg, deb_inc_level): modified so
	  deb_inc_level()'s output is more pretty at time of first call
