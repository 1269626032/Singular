# @configure_input@
# $Id: GNUmakefile.in,v 1.15 1997-09-29 15:09:31 schmidt Exp $

#
# GNUmakefile.in - used by configure to create GNUmakefile, the
#   top level makefile for factory.
#
# In general, you should let configure guess the correct values
# for the variables below.  But if something seriously goes wrong
# in configuring, please inform the authors and feel free to
# edit the marked section.
#
# See the INSTALL file for information on how to build factory.
#
# Note:	Use GNU make to make with this makefile.
#

############### START OF CONFIGURABLE SECTION ###############

SHELL =		/bin/sh

#
# - versions.  Do not change version here !!!
#
version =	@factory_version@
distname =	factory-$(version)

#
# - paths.
#
prefix =	@prefix@
exec_prefix =	@exec_prefix@
libdir =	@libdir@
datadir =	@datadir@
gftabledir =	@gftabledir@
includedir =	@includedir@
templatedir =	@templatedir@

srcdir =	@srcdir@
VPATH =		@srcdir@

#
# - the name of the game.
#
libfactory =	@libfactory@

#
# - programs.
#
CC =		@CC@
CXX =		@CXX@
# seems configure sometimes finds non-BSD install, so we better
# hardcode path to our install-sh
INSTALL =	$(srcdir)/bin/install-sh -c
INSTALL_DATA =	@INSTALL_DATA@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
RANLIB =	@RANLIB@

AR =		@AR@
BISON =		@BISON@
MKINSTALLDIRS =	@MKINSTALLDIRS@
MAKEHEADER =	@MAKEHEADER@

#
# - flags.
#
CFLAGS =	@CFLAGS@
CPPFLAGS =	@CPPFLAGS@
CXXFLAGS =	@CXXFLAGS@
DEFS =		@DEFS@
LDFLAGS =	@LDFLAGS@
LIBS =		@LIBS@

ARFLAGS =	@ARFLAGS@
MAKEHEADERFLAGS=@MAKEHEADERFLAGS@

#
# - some other variables.
#
factorysrc =	@factorysrc@
factoryincl =	@factoryincl@
memmansrc =	@memmansrc@
memmanincl =	@memmanincl@

alltargets =	@alltargets@
installtargets =@installtargets@
uninstalltargets=@uninstalltargets@

############### END OF CONFIGURABLE SECTION ###############

#
# - compiler flags.
#
WARNFLAGS =	-w

# flags to translate library c files
LIBCFLAGS =	$(WARNFLAGS) \
		-I. -I$(srcdir) \
		$(DEFS) $(CPPFLAGS) $(CFLAGS)

# flags to translate library c++ files
LIBCXXFLAGS =	$(WARNFLAGS) -fno-implicit-templates \
		-I. -I$(srcdir) \
		$(DEFS) $(CPPFLAGS) $(CXXFLAGS)

# flags to translate ftmpl_inst.cc
TMPLCXXFLAGS =	$(WARNFLAGS) \
		-I. -I$(srcdir) \
		$(DEFS) $(CPPFLAGS) $(CXXFLAGS)

# flags to link test programs
TESTCXXFLAGS =	$(LIBCXXFLAGS)

# flags to link test programs
TESTLDFLAGS = 	$(LIBS) $(LDFLAGS)

# flags to create dependency lists
DEPCXXFLAGS =	-I. -I$(srcdir) \
		$(DEFS) $(CPPFLAGS)

#
# - source files.
#

# factory source files
basefactorysrc := \
		canonicalform.cc \
		cf_algorithm.cc \
		cf_binom.cc \
		cf_char.cc \
		cf_chinese.cc \
		cf_eval.cc \
		cf_factor.cc \
		cf_factory.cc \
		cf_gcd.cc \
		cf_generator.cc \
		cf_globals.cc \
		cf_irred.cc \
		cf_iter.cc \
		cf_linsys.cc \
		cf_map.cc \
		cf_ops.cc \
		cf_primes.cc \
		cf_random.cc \
		cf_resultant.cc \
		cf_reval.cc \
		cf_switches.cc \
		cf_util.cc \
		debug.cc \
		fac_berlekamp.cc \
		fac_cantzass.cc \
		fac_distrib.cc \
		fac_ezgcd.cc \
		fac_iterfor.cc \
		fac_multihensel.cc \
		fac_multivar.cc \
		fac_sqrfree.cc \
		fac_univar.cc \
		fac_util.cc \
		ffops.cc \
		gf_tabutil.cc \
		gfops.cc \
		initgmp.cc \
		int_cf.cc \
		int_int.cc \
		int_poly.cc \
		int_pp.cc \
		int_rat.cc \
		sm_sparsemod.cc \
		sm_util.cc \
		variable.cc
singfactorysrc := \
		singext.cc
useiofactorysrc := \
		parseutil.cc \
		readcf.y
distfactorysrc := \
		$(basefactorysrc) \
		$(singfactorysrc) \
		$(useiofactorysrc)

# factory object files and dependencies
factoryobj :=	$(factorysrc:.cc=.o)
factoryobj :=	$(factoryobj:.y=.o)
factorydep :=	$(factorysrc:.cc=.d)
factorydep :=	$(factorydep:.y=.d)

# factory header files
basefactoryincl := \
		assert.h \
		canonicalform.h \
		cf_algorithm.h \
		cf_binom.h \
		cf_defs.h \
		cf_eval.h \
		cf_factory.h \
		cf_generator.h \
		cf_globals.h \
		cf_gmp.h \
		cf_irred.h \
		cf_iter.h \
		cf_map.h \
		cf_primes.h \
		cf_primetab.h \
		cf_random.h \
		cf_reval.h \
		cf_switches.h \
		cf_util.h \
		debug.h \
		fac_berlekamp.h \
		fac_cantzass.h \
		fac_distrib.h \
		fac_iterfor.h \
		fac_multivar.h \
		fac_sqrfree.h \
		fac_univar.h \
		fac_util.h \
		ffops.h \
		gf_tabutil.h \
		gfops.h \
		gmpext.h \
		imm.h \
		int_cf.h \
		int_int.h \
		int_poly.h \
		int_pp.h \
		int_rat.h \
		sm_sparsemod.h \
		sm_util.h \
		timing.h \
		variable.h
singfactoryincl := \
		singext.h
useiofactoryincl := \
		parseutil.h
distfactoryincl := \
		$(basefactoryincl) \
		$(singfactoryincl) \
		$(useiofactoryincl)

# memory manager source files
basememmansrc := \
		newdelete.cc
newmemmansrc :=	\
		mmalloc.c \
		mmallocb.c \
		mmallocs.c \
		mmblock.c \
		mmheap.c \
		mminit.c \
		mmspec.c \
		mmutil.c
oldmemmansrc :=	\
		memutil.c
distmemmansrc := \
		$(basememmansrc) \
		$(newmemmansrc) \
		$(oldmemmansrc)

# memory manager object files and dependencies
memmanobj :=	$(memmansrc:.cc=.o)
memmanobj :=	$(memmanobj:.c=.o)
memmandep :=	$(memmansrc:.cc=.d)
memmandep :=	$(memmandep:.c=.d)

# memory manager header files
newmemmanincl := \
		mmprivate.h \
		memman.h
oldmemmanincl := \
		memutil.h
distmemmanincl := \
		$(newmemmanincl) \
		$(oldmemmanincl)

# factory template files
templatesrc :=	\
		ftmpl_array.cc \
		ftmpl_factor.cc \
		ftmpl_functions.h \
		ftmpl_list.cc \
		ftmpl_matrix.cc
templateincl :=	\
		ftmpl_array.h \
		ftmpl_factor.h \
		ftmpl_list.h \
		ftmpl_matrix.h

# header templates
hdrtemplsrc := \
		factoryconf.template \
		factory.template
hdrtempldep :=	$(hdrtemplsrc:.template=.d)

# all the C/C++ source files in the distribution
distsrc :=	\
		$(distfactorysrc) $(distmemmansrc) \
		$(addprefix templates/,$(templatesrc)) \
		readcf.cc ftmpl_inst.cc gengftables.cc

# all the C/C++ include files in the distribution
distincl :=	\
		$(distfactoryincl) $(distmemmanincl) \
		$(addprefix templates/,$(templateincl))

# all files in the distribution
distfiles :=	\
		$(distsrc) $(distincl) $(hdrtemplsrc) \
		GNUmakefile.in configure.in config.h.in configure \
		ChangeLog README NEWS INSTALL \
		bin/folding.el bin/fold-docu.el \
		bin/install-sh bin/makeheader bin/mkinstalldirs

#
# - phony targets.
#
.PHONY:		all cf mem dist depend \
		clean mostlyclean distclean maintainer-clean \
		install installcf installmem installgftables \
		uninstall uninstallcf uninstallmem uninstallgftables

#
# - pattern rules.
#

# how to create library objets
%.o: %.cc config.h
	$(CXX) -c $< $(LIBCXXFLAGS) -o $@
%.o: %.c config.h
	$(CC) -c $< $(LIBCFLAGS) -o $@

# how to create dependency files
%.d: %.cc config.h factoryconf.h
	echo $@ "\\" > $@
	$(CXX) -MM $< $(DEPCXXFLAGS) >> $@
%.d: %.c config.h factoryconf.h
	echo $@ "\\" > $@
	$(CXX) -MM $< $(DEPCXXFLAGS) >> $@
%.d: %.template
	echo $@ $(@:.d=.h) : "\\" > $@
	sed -n '/^\/\*MAKEHEADER/!d; n; s/^#include "//; s/"//; p;' $< | tr '\012' ' ' >> $@
	echo >> $@

# how to create header files from header templates
%.h: %.template
	$(MAKEHEADER) $(MAKEHEADERFLAGS) $< $@

#
# - building factory.
#
all:		$(alltargets)

cf:		factoryconf.h factory.h $(libfactory)

mem:		libcfmem.a

#
# - explicit targets.
#
$(libfactory):	$(factoryobj)
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

libcfmem.a:	$(memmanobj)
		$(AR) $(ARFLAGS) $@ $^
		$(RANLIB) $@

$(srcdir)/readcf.cc: readcf.y
		$(BISON) $< -o $@

ftmpl_inst.o:	ftmpl_inst.cc factoryconf.h factory.h \
		$(addprefix templates/,$(templatesrc)) \
		$(addprefix templates/,$(templateincl))
		$(CXX) -c $< $(TMPLCXXFLAGS) -o $@

# this are not all dependencies, but the most important ones
gengftables.o:	gengftables.cc factory.h gf_tabutil.h \
		factoryconf.h config.h
		@if test -z "$(filter mem,$(alltargets))" \
		  || test -z "$(filter readcf.y,$(factorysrc))"; then \
		  echo "You have to configure --with-memman --enable-streamio"; \
		  echo "to make gengftables."; \
		  exit 1; \
		fi
		$(CXX) -c $< $(TESTCXXFLAGS) -o $@

gengftables:	gengftables.o ftmpl_inst.o $(libfactory) libcfmem.a
		$(CXX) $< ftmpl_inst.o -L. -lcf -lcfmem $(TESTLDFLAGS) -o $@

gftables:	gengftables
		@echo "This command will take quite a long time to execute;"
		@echo "maybe you want to get the tables directly via ftp (see"
		@echo "the INSTALL file)."
		$(MKINSTALLDIRS) gftables
		./gengftables

# specify dependency in case user does not 'make depend'
factoryconf.h:	config.h

TAGS:
		etags $(addprefix $(srcdir)/, $(distsrc) $(distincl))

#
# - install targets.
#
install:	$(installtargets)

installcf:	cf
		$(MKINSTALLDIRS) $(libdir)
		$(MKINSTALLDIRS) $(includedir)
		$(MKINSTALLDIRS) $(templatedir)
		$(INSTALL_DATA) $(libfactory) $(libdir)/$(libfactory)
		$(INSTALL_DATA) factory.h $(includedir)/factory.h
		$(INSTALL_DATA) factoryconf.h $(includedir)/factoryconf.h
		$(INSTALL_DATA) $(srcdir)/ftmpl_inst.cc $(templatedir)/ftmpl_inst.cc
		for file in $(templatesrc) $(templateincl); do \
		  $(INSTALL_DATA) $(srcdir)/templates/$$file $(templatedir)/$$file; \
		done

installmem:	mem
		$(MKINSTALLDIRS) $(libdir)
		$(INSTALL_DATA) libcfmem.a $(libdir)/libcfmem.a

# to a pity, this cannot be done automatically ...
installgftables:
		@echo "Copying GF(q) tables ..."
		@if test -d gftables; then \
		  $(MKINSTALLDIRS) $(gftabledir); \
		  for file in gftables/gftable.*.*; do \
		    $(INSTALL_DATA) $$file $(gftabledir); \
		  done \
		elif test -d "$(srcdir)"/gftables; then \
		  $(MKINSTALLDIRS) $(gftabledir); \
		  for file in "$(srcdir)"/gftables/gftable.*.*; do \
		    $(INSTALL_DATA) $$file $(gftabledir); \
		  done \
		else \
		  echo "Run 'make gftables' before installing them"; \
		  exit 1; \
		fi

#
# - uninstall targets.
#
uninstall:	$(uninstalltargets)

uninstallcf:
		-for file in $(templatesrc) $(templateincl); do \
		  rm -f $(templatedir)/$$file; \
		done
		-rm -f $(templatedir)/ftmpl_inst.cc
		-rm -f $(includedir)/factoryconf.h
		-rm -f $(includedir)/factory.h
		-rm -f $(libdir)/$(libfactory)
		-rmdir $(templatedir)
		-rmdir $(includedir)
		-rmdir $(libdir)

uninstallmem:
		-rm -f $(libdir)/libcfmem.a
		-rmdir $(libdir)

uninstallgftables:
		-rm -f $(gftabledir)/gftable.*.*
		-rmdir $(gftabledir)

#
# - building a distribution.
#
dist:		$(srcdir)/readcf.cc $(srcdir)/configure
		rm -f $(distname).tgz
		rm -rf $(distname)
		$(MKINSTALLDIRS) $(distname)/templates
		$(MKINSTALLDIRS) $(distname)/bin
		@echo "Copying files to distribution directory ..."
		@for file in $(distfiles); do \
		  ln $(srcdir)/$$file $(distname)/$$file; \
		done
		tar cf $(distname).tar $(distname)
		gzip $(distname).tar
		mv $(distname).tar.gz $(distname).tgz

#
# - cleaning up.
#
clean:		
		-rm -f $(libfactory) libcfmem.a gengftables \
		  factoryconf.h factory.h *.o *.d

# remove gftables only if we built them
mostlyclean:	clean
		-rm -f TAGS
		-if test ! -f gftables/README; then \
		  rm -rf gftables; \
		fi

distclean:	mostlyclean
		-rm -f $(distname).tgz GNUmakefile stamp-h \
		  config.cache config.log config.status config.h
		-rm -rf $(distname)

maintainer-clean: distclean
		@echo "This command is intended for maintainers to use;"
		@echo "it deletes files that require bison to rebuild."
		-rm -f $(srcdir)/readcf.cc

#
# - dependencies.
#
# Do not generate them automatically if there are not any
# dependencies at all.  this trick saves some time when you do
# not want to compile but do some maintenance which do not
# require the dependencies.  say 'make depend' to create the
# dependencies explicitly.
#
depend:		$(factorydep) $(memmandep) $(hdrtempldep)

ifneq ($(wildcard *.d),)
  include $(factorydep) $(memmandep) $(hdrtempldep)
endif

#
# - configure stuff.
#
$(srcdir)/configure: configure.in
		-cd $(srcdir) && autoconf

# seems gmake needs at least a trivial command.  otherwise all
# files which depend on config.h will be remade even if congig.h
# did not change.
config.h:	stamp-h
		@:

stamp-h:	config.h.in config.status
		CONFIG_FILES= CONFIG_HEADERS=config.h ./config.status
		echo timestamp > stamp-h

GNUmakefile:	GNUmakefile.in config.status
		CONFIG_FILES=GNUmakefile CONFIG_HEADERS= ./config.status

config.status:	configure
		./config.status --recheck

#
# - some extra targets inserted by configure.
#
@timingtargets@
@debouttargets@
@debtimingtargets@
