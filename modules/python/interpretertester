ring r=0,(x,y,z),lp;
int a=12345;
poly f=10;
ideal i=x,y;
list l=f,i;
intvec iv=1,2,3,45,5,6,7,8;
timer=1;
string s="sdgjgdksdgjs";
proc myprintmat(matrix m){
  print(m);
}
proc stringproc1(){
    return("blubber");
}
proc listproc1(list l){
    print(l);
    list erg=1,list(2,2784);
    return(erg);
}
proc testproc1(){
print("Hallo Welt");
return(1);
}
proc testproc2(poly p){
print("Hallo Welt");
print(p*p);
return(p*p+p*p*p);
}
proc testproc3(vector p){
print("Hallo Welt ihr Vektoren");
print(p);
return(p);
}
proc testproc4(number p){
print("Hallo Welt ihr Numbers");
print(p);
return(p);
}
proc testproc5(int p){
print("Hallo Welt ihr ints");
print(p);
return(p);
}
proc testproc6(poly p, poly q){
  matrix m[3][10];
  int i;
  int j;
  for(i=1;i<=3;i++){
    for(j=1;j<=10;j++){
	m[i,j]=p^i*q^j;
    }
  }

  return(m);
}
list mylist=1,2,3;
LIB("python_module.so");
Python_module::python("from Singular import number,  polynomial, gen, ideal

from interpreter import global_functions
functions=global_functions()
functions.setring(functions.r)
print functions.mylist;
functions.mylist=[1,2,[5,6]]
print functions.mylist
print functions.s
functions.s='only a example'
print functions.s
functions.__getattr__('print')('Python ist fun und fun und fun')
print functions.f
print functions.i
firstl=functions.l
print firstl
print functions.listproc1([1,[3,6]])
print functions.stringproc1()
for i in firstl:
    print i
#print functions.testproc1()
print 'hi'
x=polynomial('x')
y=polynomial('y')
i=ideal()
i.append(x)
i.append(x+y)
print i
print functions.groebner(i);
#print functions.std(i);
xy=x*y
functions.f=xy

xye1=xy*gen(1)

print functions.testproc2(xy)
print functions.testproc3(xye1)
print functions.testproc4(number(3243287))
print functions.testproc5(325)
print functions.testproc6(x,y)
from Singular import foo2;
m=functions.testproc6(x,y)
functions.myprintmat(m)
print functions.a
from interpreter import mycbm as cbm

print i
cbm('std', i)
print 'suc1'
print i
print cbm('std', i)
print cbm('random',1,10)
print functions.std(i)
print functions.random(1,10)
print 'hallo'
print functions.intersect(i,i,i,i)
from Singular import ring, intvec
v=intvec()
v.append(12)
v.append(13)
print len(v)
print v
ring()
ring()
print 'calling print'
functions.__getattr__('print')(ring());
print 'the end'
print functions.ringlist(ring())
print functions.iv
functions.iv=v
print functions.iv
");
print(f);

$
