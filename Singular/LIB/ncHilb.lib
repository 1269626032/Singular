//////////////////////////////////////////////////////////////////////////////
version="version nc_hilb.lib 4.0.3.3 Sep_2016 "; // $Id$
category="Noncommutative algebra";
info="
LIBRARY:  nchilb.lib: A library for computing the Hilbert series of the
                       non-commutative monomial algebras (e.g. k<x,y,z>/I,
                       where I is a two-sided ideal).

AUTHOR:   Sharwan K. Tiwari   stiwari@mathematik.uni-kl.de

REFERENCES:
          La Scala R.: Monomial right ideals and the Hilbert series of
          non-commutative modules, J. of Symb. Comp. (2016).

PROCEDURES:
          nchilb(L, d, #); gives the Hilbert series of a monomial algebra
          (free algebra/two-sided monomial ideal). 
          List L contains non-comm. polynomials.
          And d is a degree bound for the Groebner basis computation of 
          the ideal generated by L. Third argument is optional, required for
          the non-finitely generated ideals.
";

LIB "freegb.lib";

proc nchilb(list L_wp, int d, list #)
"USAGE:  nchilb(list of relations, an integer, optional);
         L is a list of modules (each module represents a free-polynomial), 
         d is an integer for the degree bound, 
         # != NULL for non-finitely generated ideals;
NOTE  : The input ideal needs to be given in special form. It is a list
        of modules, where each generator of every module represents a
        monomial times a coefficient in the free associative algebra.
        The first entry, in each generator, represents a coefficient and
        every next entry is a variable.
        Ex. module p1=[1,y,z],[-1,z,y] represents the poly y*z-z*y;
            module p2=[1,x,z,x],[-1,z,x,z] represents the poly x*z*x-z*x*z 
        for more details about the input, see examples.
EXAMPLE: example nchilb; shows an example "
{
    system("--ticks-per-sec",1000); 
    if (d<1) {"bad degree bound"; return(0);}
    printlevel=0; 
    def save = basering;
    int sz=size(#);
   
    def R =makeLetterplaceRing(d);
    setring R;
    ideal I;
    poly p=0;
    
    // convert list L_wp of free-poly to letterPlace-poly format 
    setring save;
    module M;
    int i,j,k,sw,sm,slm;
    vector w;                            // for words 
    slm = size(L_wp);                    // number of polys in the given ideal
    string letpl;
    for (i=1; i<=slm; i++)
    {
        M  = L_wp[i];
        sm = ncols(M);                   // number of words in the free-poly M
        for (j=1; j<=sm; j++)
        {
            w  = M[j];
            sw = size(w); 
            letpl = "p = p + ";
            for (k=2; k<=sw; k++)
            {
                letpl = letpl + string(w[k])+"("+string(k-1)+")*";
            }
            letpl = letpl + string(w[1])+";";
            
            setring R;
            execute(letpl);
            setring save;
        }
        setring R;
        I = I,p; //lp-polynomial added to I
        p = 0;   //ready for the next polynomial  
        setring save;
    }
    kill letpl;
    setring R;
    int tt,rt;
    
    tt=timer;
    rt=rtimer;
    ideal J = system("freegb",I,d,nvars(save));
    
    if(printlevel >=2)
    {
         "CPU-time of GB computation="+string(timer-tt)+" milli-sec.";
         "Real-time of GB computation="+string(rtimer-rt)+" milli-sec.";
    }
    
    //Groebner Basis is computed for the given ideal.
    //now compute the leading monomials of Groebner Basis
    
    ideal J_lm;
    for(i=1;i<=size(J);i++)
    {
        J_lm[i]=leadmonom(J[i]);
    }
    
    setring save;
    def A =makeLetterplaceRing(2*d);
    setring A;
    ideal I=imap(R, J_lm);
    
    //compute the Hilbert series
    tt=timer;
    rt=rtimer;
    if(sz==1)
    {
        system("nc_hilb",I,1);
    }
    else
    {
        system("nc_hilb",I);
    }
    if(printlevel >=2)
    {
        "CPU-time of Hilbert series computation="+string(timer-tt)+" milli-sec.";
        "Real-time of Hilbert series computation="+string(rtimer-rt)+" milli-sec.";  
    }

}
example
{ 
"EXAMPLE:"; echo = 2;
    ring r=0,(x,y,z),dp;
    module p1=[1,y,z],[-1,z,y];      // represents the poly y*z-z*y
    module p2=[1,x,z,x],[-1,z,x,z]; //represents the poly x*z*x-z*x*z
    list l1=list(p1,p2);
    nchilb(l1,6,1); //third argument is for non-finitely generated case
    
    ring r=0,(x,y,z,w),dp;
    module p1=[1,y,x],[-1,x,y];
    module p2=[1,z,x],[-1,x,z];
    module p3=[1,w,x],[-1,x,w];
    module p4=[1,z,y],[-1,y,z];
    module p5=[1,w,y],[-1,y,w];
    module p6=[1,w,z],[-1,z,w];
    list l2=list(p1,p2,p3,p4,p5,p6);
    nchilb(l2,5);
        
    ring r=0,(X,Y,Z),dp;
    module p1 =[1,Y,Z];
    module p2 =[1,Y,Z,X];
    module p3 =[1,Y,Z,Z,X,Z];
    module p4 =[1,Y,Z,Z,Z,X,Z];
    module p5 =[1,Y,Z,Z,Z,Z,X,Z];
    module p6 =[1,Y,Z,Z,Z,Z,Z,X,Z];
    module p7 =[1,Y,Z,Z,Z,Z,Z,Z,X,Z];
    module p8 =[1,Y,Z,Z,Z,Z,Z,Z,Z,X,Z];
    list l3=list(p1,p2,p3,p4,p5,p6,p7,p8);
    nchilb(l3,10);
    
    ring r=0,U(1..3),dp;
    module p1=[1,U(2),U(3),U(3)];
    module p2=[1,U(2),U(2),U(3)];
    module p3=[1,U(1),U(3),U(3)];
    module p4=[1,U(1),U(3),U(2)];
    module p5=[1,U(1),U(2),U(3)];
    module p6=[1,U(1),U(2),U(2)];
    module p7=[1,U(1),U(1),U(3)];
    module p8=[1,U(1),U(1),U(2)];
    module p9=[1,U(2),U(3),U(2),U(3)];
    module p10=[1,U(2),U(3),U(1),U(3)];
    module p11=[1,U(2),U(3),U(1),U(2)];
    module p12=[1,U(1),U(3),U(1),U(3)];
    module p13=[1,U(1),U(3),U(1),U(2)];
    module p14=[1,U(1),U(2),U(1),U(3)];
    module p15=[1,U(1),U(2),U(1),U(2)];
    module p16=[1,U(2),U(3),U(2),U(1),U(3)];
    module p17=[1,U(2),U(3),U(2),U(1),U(2)];
    module p18=[1,U(2),U(3),U(2),U(2),U(1),U(3)];
    module p19=[1,U(2),U(3),U(2),U(2),U(1),U(2)];
    module p20=[1,U(2),U(3),U(2),U(2),U(2),U(1),U(3)];
    module p21=[1,U(2),U(3),U(2),U(2),U(2),U(1),U(2)];
    list ll=list(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,
    p14,p15,p16,p17,p18,p19,p20,p21);
    nchilb(ll,7,1);
    
    ring r=0,(x,y,z),dp;
    module p1=[0]; //zero ideal
    list l1=list(p1);
    nchilb(l1,2);
    
    ring r=0,(x,y,z),dp;
    module p1=[1]; //unit ideal
    list l1=list(p1);
    nchilb(l1,2);
}

